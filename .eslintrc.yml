# eslint checklist
# install vscode eslint extension
# ensure "prettier.eslintIntegration" is set to true
# ensure "prettier.tslintIntegration" is set to false
# note: use npm run lint -- --init to generate yml

env:
  es6: true
  jest: true
  node: true
  browser: true

extends:
  - airbnb # use airbnbs style guide
  # - eslint:recommended
  - plugin:node/recommended # lint with preferred node standards
  # - plugin:compat/recommended # lint browser compatibility using browserslist in package.json
  - plugin:react/recommended # ignore unused vars when importing react
  - plugin:jsx-a11y/recommended # identify accessibility issues
  - plugin:sonarjs/recommended # bug detection, code smells, and cognitive complexity
  - plugin:unicorn/recommended # lint with unique set of rules
  - plugin:fp/recommended # lint with fp rules in enforced
  - plugin:array-func/all # lint with best practices for array iterators
  - plugin:promise/recommended # lint with best practices for promises
  - plugin:security/recommended # identify potential security hotspots
  - plugin:switch-case/recommended # lint with best practices for switch statements
  - plugin:jest/recommended # lint with best practices for jest files

globals:
  Atomics: readonly
  SharedArrayBuffer: readonly

# parser: '@typescript-eslint/parser'
parser: babel-eslint

parserOptions:
  ecmaVersion: 2018
  sourceType: module
  ecmaFeatures:
    impliedStrict: true
    jsx: true

plugins:
  - fp # expose fp rules
  - jest # expost jest testing rules
  - xss # expose rules for potential url attack vectors
  - node # expose 2019 to ecmaVersion in parserOptions, Atomics and SharedArrayBuffer
  - babel # expose babel specific rules
  - react # expose react specific rules
  - jsx-a11y # expose accessibility rules
  - compat # expose browser compatability rules
  - import # lint import/export and prevent misspelling file paths and import names
  - unicorn # expose various awesome eslint rules such as file names and type errors
  - sonarjs # expose bug detection and code smell rules
  - immutable # no let, no this, and no mutation (even const object mutation)
  - no-loops # disallow use of loops (for, for-in, while, do-while, for-of)
  - promise # expose promise specific rules
  - security # expose security relevant rules
  - filenames # enforce consistent file names
  - switch-case # expose switch statement rules
  - optimize-regex # optimize regex literals

settings:
  import/parsers:
    '@typescript-eslint/parser': [.ts, .tsx]

  import/resolver:
    typescript: {}

  typescript:
    directory: '<root>'

rules:
  arrow-parens: [error, as-needed]
  quotes: [error, single]
  semi: [error, always]
  react/jsx-uses-react: 1
  implicit-arrow-linebreak: 0
  # max-len: [error, { ignorePattern: 'dispatch: Dispatch' }] # that line gets pretty long
  no-unused-vars: [error, { varsIgnorePattern: 'React' }] # react is used under the hood
  react/jsx-filename-extension: [1, { extensions: [.ts, .tsx, .js, .jsx] }] # allow jsx in tsx files
  no-console: 0 # needed for app greeting and missing env messages
  optimize-regex/optimize-regex: warn
  node/no-unsupported-features/es-syntax: 0
  no-process-exit: 0 # needed for app greeting if env file does not exist
  unicorn/no-process-exit: 0 # needed for app greeting if env file does not exist
  array-func/prefer-array-from: 0 # keep array spreading despite minor performance cost
  immutable/no-let: 2 # explicitly enforce`
  immutable/no-mutation: 2 # explicitly enforce
  fp/no-unused-expression: 0 # difficult to enforce
  fp/no-class: 0 # we are using react
  fp/no-this: 0 # dup: this is needed because of react
  immutable/no-this: 0 # dup: this is needed because of react
  unicorn/filename-case: 0 # not extensible to react files
  xss/no-location-href-assign: [2, { escapeFunc: escapeHref }] # consult for proper handling https://github.com/Rantanen/eslint-plugin-xss/blob/master/docs/rules/no-location-href-assign.md
  security/detect-non-literal-fs-filename: 0 # causing more issues than it solves
  # compat/compat: error # seems to be broken
  object-curly-newline: 0 # i like my objects on one line thank you very much
  switch-case/newline-between-switch-case: [error, always]
  import/no-named-as-default: 0 # conflicts with common react/redux paradigm
  import/no-unresolved: 0 # cannot resolve typescript paths (ie @components/*)
  react/prop-types: 0 # unneeded since using typescript
  linebreak-style: 0 # windows mac line break compatibility issue

# NOTES
# 1. using let (taken from https://github.com/jhusain/eslint-plugin-immutable): There's no reason to use let in a Redux/React application, because all your state is managed by either Redux or React. Use const instead, and avoid state bugs altogether.

# 2. using for loops (taken from https://github.com/jhusain/eslint-plugin-immutable): What about for loops? Loops can be replaced with the Array methods like map, filter, and so on. If you find the built-in JS Array methods lacking, use lodash.

# 3. using loops in general (take from https://github.com/buildo/eslint-plugin-no-loops): It's 2019 and you still use loops?
